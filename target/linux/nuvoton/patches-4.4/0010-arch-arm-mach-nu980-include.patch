diff -uprN linux-4.4.194/arch/arm/mach-nuc980/include/mach/regs-fmi.h NUC980-linux-4.4.y-master/arch/arm/mach-nuc980/include/mach/regs-fmi.h
--- linux-4.4.194/arch/arm/mach-nuc980/include/mach/regs-fmi.h	2021-08-05 23:48:46.543220000 -0700
+++ NUC980-linux-4.4.y-master/arch/arm/mach-nuc980/include/mach/regs-fmi.h	2021-06-20 19:14:48.000000000 -0700
@@ -68,11 +68,11 @@
 #define REG_BCH_ECC_ADDR11	(FMI_BA+0x92C)	/* BCH error byte address 11 */
 
 /* NAND-type Flash BCH Error Data Registers */
-#define REG_BCH_ECC_DATA0	(FMI_BA+0x980)	/* BCH error byte data 0 */
+#define REG_BCH_ECC_DATA0	(FMI_BA+0x960)	/* BCH error byte data 0 */
 #define REG_BCH_ECC_DATA1	(FMI_BA+0x964)	/* BCH error byte data 1 */
 #define REG_BCH_ECC_DATA2	(FMI_BA+0x968)	/* BCH error byte data 2 */
 #define REG_BCH_ECC_DATA3	(FMI_BA+0x96C)	/* BCH error byte data 3 */
-#define REG_BCH_ECC_DATA4	(FMI_BA+0x980)	/* BCH error byte data 4 */
+#define REG_BCH_ECC_DATA4	(FMI_BA+0x970)	/* BCH error byte data 4 */
 #define REG_BCH_ECC_DATA5	(FMI_BA+0x974)	/* BCH error byte data 5 */
 
 /* NAND-type Flash Redundant Area Registers */
diff -uprN linux-4.4.194/arch/arm/mach-nuc980/include/mach/regs-pdma.h NUC980-linux-4.4.y-master/arch/arm/mach-nuc980/include/mach/regs-pdma.h
--- linux-4.4.194/arch/arm/mach-nuc980/include/mach/regs-pdma.h	2021-08-05 23:48:46.543220000 -0700
+++ NUC980-linux-4.4.y-master/arch/arm/mach-nuc980/include/mach/regs-pdma.h	2021-06-20 19:14:48.000000000 -0700
@@ -32,94 +32,6 @@
 
 
 typedef struct {
-
-	/**
-	 * @var DSCT_T::CTL
-	 * Offset: 0x00  Descriptor Table Control Register of PDMA Channel n.
-	 * ---------------------------------------------------------------------------------------------------
-	 * |Bits    |Field     |Descriptions
-	 * | :----: | :----:   | :---- |
-	 * |[1:0]   |OPMODE    |PDMA Operation Mode Selection
-	 * |        |          |00 = Idle state: Channel is stopped or this table is complete, when PDMA finish channel table task, OPMODE will be cleared to idle state automatically.
-	 * |        |          |01 = Basic mode: The descriptor table only has one task
-	 * |        |          |When this task is finished, the PDMA_INTSTS[n] will be asserted.
-	 * |        |          |10 = Scatter-Gather mode: When operating in this mode, user must give the next descriptor table address in PDMA_DSCT_NEXT register; PDMA controller will ignore this task, then load the next task to execute.
-	 * |        |          |11 = Reserved.
-	 * |        |          |Note: Before filling transfer task in the Descriptor Table, user must check if the descriptor table is complete.
-	 * |[2]     |TXTYPE    |Transfer Type
-	 * |        |          |0 = Burst transfer type.
-	 * |        |          |1 = Single transfer type.
-	 * |[6:4]   |BURSIZE   |Burst Size
-	 * |        |          |This field is used for peripheral to determine the burst size or used for determine the re-arbitration size.
-	 * |        |          |000 = 128 Transfers.
-	 * |        |          |001 = 64 Transfers.
-	 * |        |          |010 = 32 Transfers.
-	 * |        |          |011 = 16 Transfers.
-	 * |        |          |100 = 8 Transfers.
-	 * |        |          |101 = 4 Transfers.
-	 * |        |          |110 = 2 Transfers.
-	 * |        |          |111 = 1 Transfers.
-	 * |        |          |Note: This field is only useful in burst transfer type.
-	 * |[7]     |TBINTDIS  |Table Interrupt Disable Bit
-	 * |        |          |This field can be used to decide whether to enable table interrupt or not
-	 * |        |          |If the TBINTDIS bit is enabled when PDMA controller finishes transfer task, it will not generates transfer done interrupt.
-	 * |        |          |0 = Table interrupt Enabled.
-	 * |        |          |1 = Table interrupt Disabled.
-	 * |[9:8]   |SAINC     |Source Address Increment
-	 * |        |          |This field is used to set the source address increment size.
-	 * |        |          |11 = No increment (fixed address).
-	 * |        |          |Others = Increment and size is depended on TXWIDTH selection.
-	 * |[11:10] |DAINC     |Destination Address Increment
-	 * |        |          |This field is used to set the destination address increment size.
-	 * |        |          |11 = No increment (fixed address).
-	 * |        |          |Others = Increment and size is depended on TXWIDTH selection.
-	 * |[13:12] |TXWIDTH   |Transfer Width Selection
-	 * |        |          |This field is used for transfer width.
-	 * |        |          |00 = One byte (8 bit) is transferred for every operation.
-	 * |        |          |01= One half-word (16 bit) is transferred for every operation.
-	 * |        |          |10 = One word (32-bit) is transferred for every operation.
-	 * |        |          |11 = Reserved.
-	 * |        |          |Note: The PDMA transfer source address (PDMA_DSCT_SA) and PDMA transfer destination address (PDMA_DSCT_DA) should be alignment under the TXWIDTH selection
-	 * |[14]    |TXACK     |Transfer Acknowledge Selection
-	 * |        |          |0 = transfer ack when transfer done.
-	 * |        |          |1 = transfer ack when PDMA get transfer data.
-	 * |[15]    |STRIDEEN |Stride Mode Enable Bit
-	 * |        |          |0 = Stride transfer mode Disabled.
-	 * |        |          |1 = Stride transfer mode Enabled.
-	 * |[31:16] |TXCNT     |Transfer Count
-	 * |        |          |The TXCNT represents the required number of PDMA transfer, the real transfer count is (TXCNT + 1); The maximum transfer count is 16384 , every transfer may be byte, half-word or word that is dependent on TXWIDTH field.
-	 * |        |          |Note: When PDMA finish each transfer data, this field will be decrease immediately.
-	 * @var DSCT_T::SA
-	 * Offset: 0x04  Source Address Register of PDMA Channel n
-	 * ---------------------------------------------------------------------------------------------------
-	 * |Bits    |Field     |Descriptions
-	 * | :----: | :----:   | :---- |
-	 * |[31:0]  |SA        |PDMA Transfer Source Address Register
-	 * |        |          |This field indicates a 32-bit source address of PDMA controller.
-	 * @var DSCT_T::DA
-	 * Offset: 0x08  Destination Address Register of PDMA Channel n
-	 * ---------------------------------------------------------------------------------------------------
-	 * |Bits    |Field     |Descriptions
-	 * | :----: | :----:   | :---- |
-	 * |[31:0]  |DA        |PDMA Transfer Destination Address Register
-	 * |        |          |This field indicates a 32-bit destination address of PDMA controller.
-	 * @var DSCT_T::NEXT
-	 * Offset: 0x0C  Next Scatter-Gather Descriptor Table Offset Address of PDMA Channel n
-	 * ---------------------------------------------------------------------------------------------------
-	 * |Bits    |Field     |Descriptions
-	 * | :----: | :----:   | :---- |
-	 * |[15:0]  |EXENEXT   |PDMA Execution Next Descriptor Table Offset
-	 * |        |          |This field indicates the offset of next descriptor table address of current execution descriptor table in system memory.
-	 * |        |          |Note: write operation is useless in this field.
-	 * |[31:16] |NEXT      |PDMA Next Descriptor Table Offset.
-	 * |        |          |This field indicates the offset of the next descriptor table address in system memory.
-	 * |        |          |Write Operation:
-	 * |        |          |If the system memory based address is 0x2000_0000 (PDMA_SCATBA), and the next descriptor table is start from 0x2000_0100, then this field must fill in 0x0100.
-	 * |        |          |Read Operation:
-	 * |        |          |When operating in scatter-gather mode, the last two bits NEXT[1:0] will become reserved, and indicate the first next address of system memory.
-	 * |        |          |Note1: The descriptor table address must be word boundary.
-	 * |        |          |Note2: Before filled transfer task in the descriptor table, user must check if the descriptor table is complete.
-	 */
 	__IO uint32_t CTL;             /*!< [0x0000] Descriptor Table Control Register of PDMA Channel n.             */
 	__IO uint32_t SA;              /*!< [0x0004] Source Address Register of PDMA Channel n                        */
 	__IO uint32_t DA;              /*!< [0x0008] Destination Address Register of PDMA Channel n                   */
@@ -128,412 +40,11 @@ typedef struct {
 
 
 typedef struct {
-	/**
-	 * @var STRIDE_T::STCR
-	 * Offset: 0x500  Stride Transfer Count Register of PDMA Channel n
-	 * ---------------------------------------------------------------------------------------------------
-	 * |Bits    |Field     |Descriptions
-	 * | :----: | :----:   | :---- |
-	 * |[15:0]  |STC       |PDMA Stride Transfer Count
-	 * |        |          |The 16-bit register defines the stride transfer count of each row.
-	 * @var STRIDE_T::ASOCR
-	 * Offset: 0x504  Address Stride Offset Register of PDMA Channel n
-	 * ---------------------------------------------------------------------------------------------------
-	 * |Bits    |Field     |Descriptions
-	 * | :----: | :----:   | :---- |
-	 * |[15:0]  |SASOL     |VDMA Source Address Stride Offset Length
-	 * |        |          |The 16-bit register defines the source address stride transfer offset count of each row.
-	 * |[31:16] |DASOL     |VDMA Destination Address Stride Offset Length
-	 * |        |          |The 16-bit register defines the destination address stride transfer offset count of each row.
-	 */
 	__IO uint32_t STCR;           /*!< [0x0500] Stride Transfer Count Register of PDMA Channel 0                 */
 	__IO uint32_t ASOCR;          /*!< [0x0504] Address Stride Offset Register of PDMA Channel 0                 */
 } STRIDE_T;
 
 typedef struct {
-
-
-	/**
-	 * @var PDMA_T::CURSCAT
-	 * Offset: 0x100  Current Scatter-Gather Descriptor Table Address of PDMA Channel n
-	 * ---------------------------------------------------------------------------------------------------
-	 * |Bits    |Field     |Descriptions
-	 * | :----: | :----:   | :---- |
-	 * |[31:0]  |CURADDR   |PDMA Current Description Address Register (Read Only)
-	 * |        |          |This field indicates a 32-bit current external description address of PDMA controller.
-	 * |        |          |Note: This field is read only and only used for Scatter-Gather mode to indicate the current external description address.
-	 * @var PDMA_T::CHCTL
-	 * Offset: 0x400  PDMA Channel Control Register
-	 * ---------------------------------------------------------------------------------------------------
-	 * |Bits    |Field     |Descriptions
-	 * | :----: | :----:   | :---- |
-	 * |[15:0]  |CHENn     |PDMA Channel Enable Bit
-	 * |        |          |Set this bit to 1 to enable PDMAn operation. Channel cannot be active if it is not set as enabled.
-	 * |        |          |0 = PDMA channel [n] Disabled.
-	 * |        |          |1 = PDMA channel [n] Enabled.
-	 * |        |          |Note: Set corresponding bit of PDMA_PAUSE or PDMA_CHRST register will also clear this bit.
-	 * @var PDMA_T::PAUSE
-	 * Offset: 0x404  PDMA Transfer Stop Control Register
-	 * ---------------------------------------------------------------------------------------------------
-	 * |Bits    |Field     |Descriptions
-	 * | :----: | :----:   | :---- |
-	 * |[15:0]  |PAUSEn    |PDMA Transfer Pause Control Register (Write Only)
-	 * |        |          |User can set PAUSEn bit field to pause the PDMA transfer
-	 * |        |          |When user sets PAUSEn bit, the PDMA controller will pause the on-going transfer, then clear the channel enable bit CHEN(PDMA_CHCTL [n], n=0,1..7) and clear request active flag
-	 * |        |          |If re-enable the paused channel again, the remaining transfers will be processed.
-	 * |        |          |0 = No effect.
-	 * |        |          |1 = Pause PDMA channel n transfer.
-	 * @var PDMA_T::SWREQ
-	 * Offset: 0x408  PDMA Software Request Register
-	 * ---------------------------------------------------------------------------------------------------
-	 * |Bits    |Field     |Descriptions
-	 * | :----: | :----:   | :---- |
-	 * |[15:0]  |SWREQn    |PDMA Software Request Register (Write Only)
-	 * |        |          |Set this bit to 1 to generate a software request to PDMA [n].
-	 * |        |          |0 = No effect.
-	 * |        |          |1 = Generate a software request.
-	 * |        |          |Note1: User can read PDMA_TRGSTS register to know which channel is on active
-	 * |        |          |Active flag may be triggered by software request or peripheral request.
-	 * |        |          |Note2: If user does not enable corresponding PDMA channel, the software request will be ignored.
-	 * @var PDMA_T::TRGSTS
-	 * Offset: 0x40C  PDMA Channel Request Status Register
-	 * ---------------------------------------------------------------------------------------------------
-	 * |Bits    |Field     |Descriptions
-	 * | :----: | :----:   | :---- |
-	 * |[15:0]  |REQSTSn   |PDMA Channel Request Status (Read Only)
-	 * |        |          |This flag indicates whether channel[n] have a request or not, no matter request from software or peripheral
-	 * |        |          |When PDMA controller finishes channel transfer, this bit will be cleared automatically.
-	 * |        |          |0 = PDMA Channel n has no request.
-	 * |        |          |1 = PDMA Channel n has a request.
-	 * |        |          |Note: If user pauses or resets each PDMA transfer by setting PDMA_PAUSE or PDMA_CHRST register respectively, this bit will be cleared automatically after finishing current transfer.
-	 * @var PDMA_T::PRISET
-	 * Offset: 0x410  PDMA Fixed Priority Setting Register
-	 * ---------------------------------------------------------------------------------------------------
-	 * |Bits    |Field     |Descriptions
-	 * | :----: | :----:   | :---- |
-	 * |[15:0]  |FPRISETn  |PDMA Fixed Priority Setting Register
-	 * |        |          |Set this bit to 1 to enable fixed priority level.
-	 * |        |          |Write Operation:
-	 * |        |          |0 = No effect.
-	 * |        |          |1 = Set PDMA channel [n] to fixed priority channel.
-	 * |        |          |Read Operation:
-	 * |        |          |0 = Corresponding PDMA channel is round-robin priority.
-	 * |        |          |1 = Corresponding PDMA channel is fixed priority.
-	 * |        |          |Note: This field only set to fixed priority, clear fixed priority use PDMA_PRICLR register.
-	 * @var PDMA_T::PRICLR
-	 * Offset: 0x414  PDMA Fixed Priority Clear Register
-	 * ---------------------------------------------------------------------------------------------------
-	 * |Bits    |Field     |Descriptions
-	 * | :----: | :----:   | :---- |
-	 * |[15:0]  |FPRICLRn  |PDMA Fixed Priority Clear Register (Write Only)
-	 * |        |          |Set this bit to 1 to clear fixed priority level.
-	 * |        |          |0 = No effect.
-	 * |        |          |1 = Clear PDMA channel [n] fixed priority setting.
-	 * |        |          |Note: User can read PDMA_PRISET register to know the channel priority.
-	 * @var PDMA_T::INTEN
-	 * Offset: 0x418  PDMA Interrupt Enable Register
-	 * ---------------------------------------------------------------------------------------------------
-	 * |Bits    |Field     |Descriptions
-	 * | :----: | :----:   | :---- |
-	 * |[15:0]  |INTENn    |PDMA Interrupt Enable Register
-	 * |        |          |This field is used for enabling PDMA channel[n] interrupt.
-	 * |        |          |0 = PDMA channel n interrupt Disabled.
-	 * |        |          |1 = PDMA channel n interrupt Enabled.
-	 * @var PDMA_T::INTSTS
-	 * Offset: 0x41C  PDMA Interrupt Status Register
-	 * ---------------------------------------------------------------------------------------------------
-	 * |Bits    |Field     |Descriptions
-	 * | :----: | :----:   | :---- |
-	 * |[0]     |ABTIF     |PDMA Read/Write Target Abort Interrupt Flag (Read-only)
-	 * |        |          |This bit indicates that PDMA has target abort error; Software can read PDMA_ABTSTS register to find which channel has target abort error.
-	 * |        |          |0 = No AHB bus ERROR response received.
-	 * |        |          |1 = AHB bus ERROR response received.
-	 * |[1]     |TDIF      |Transfer Done Interrupt Flag (Read Only)
-	 * |        |          |This bit indicates that PDMA controller has finished transmission; User can read PDMA_TDSTS register to indicate which channel finished transfer.
-	 * |        |          |0 = Not finished yet.
-	 * |        |          |1 = PDMA channel has finished transmission.
-	 * |[2]     |ALIGNF    |Transfer Alignment Interrupt Flag (Read Only)
-	 * |        |          |0 = PDMA channel source address and destination address both follow transfer width setting.
-	 * |        |          |1 = PDMA channel source address or destination address is not follow transfer width setting.
-	 * |[8]     |REQTOF0   |Request Time-out Flag for Channel 0
-	 * |        |          |This flag indicates that PDMA controller has waited peripheral request for a period defined by PDMA_TOC0, user can write 1 to clear these bits.
-	 * |        |          |0 = No request time-out.
-	 * |        |          |1 = Peripheral request time-out.
-	 * |[9]     |REQTOF1   |Request Time-out Flag for Channel 1
-	 * |        |          |This flag indicates that PDMA controller has waited peripheral request for a period defined by PDMA_TOC1, user can write 1 to clear these bits.
-	 * |        |          |0 = No request time-out.
-	 * |        |          |1 = Peripheral request time-out.
-	 * @var PDMA_T::ABTSTS
-	 * Offset: 0x420  PDMA Channel Read/Write Target Abort Flag Register
-	 * ---------------------------------------------------------------------------------------------------
-	 * |Bits    |Field     |Descriptions
-	 * | :----: | :----:   | :---- |
-	 * |[15:0]  |ABTIFn    |PDMA Read/Write Target Abort Interrupt Status Flag
-	 * |        |          |This bit indicates which PDMA controller has target abort error; User can write 1 to clear these bits.
-	 * |        |          |0 = No AHB bus ERROR response received when channel n transfer.
-	 * |        |          |1 = AHB bus ERROR response received when channel n transfer.
-	 * @var PDMA_T::TDSTS
-	 * Offset: 0x424  PDMA Channel Transfer Done Flag Register
-	 * ---------------------------------------------------------------------------------------------------
-	 * |Bits    |Field     |Descriptions
-	 * | :----: | :----:   | :---- |
-	 * |[15:0]  |TDIFn     |Transfer Done Flag Register
-	 * |        |          |This bit indicates whether PDMA controller channel transfer has been finished or not, user can write 1 to clear these bits.
-	 * |        |          |0 = PDMA channel transfer has not finished.
-	 * |        |          |1 = PDMA channel has finished transmission.
-	 * @var PDMA_T::ALIGN
-	 * Offset: 0x428  PDMA Transfer Alignment Status Register
-	 * ---------------------------------------------------------------------------------------------------
-	 * |Bits    |Field     |Descriptions
-	 * | :----: | :----:   | :---- |
-	 * |[15:0]  |ALIGNn    |Transfer Alignment Flag Register
-	 * |        |          |0 = PDMA channel source address and destination address both follow transfer width setting.
-	 * |        |          |1 = PDMA channel source address or destination address is not follow transfer width setting.
-	 * @var PDMA_T::TACTSTS
-	 * Offset: 0x42C  PDMA Transfer Active Flag Register
-	 * ---------------------------------------------------------------------------------------------------
-	 * |Bits    |Field     |Descriptions
-	 * | :----: | :----:   | :---- |
-	 * |[15:0]  |TXACTFn   |Transfer on Active Flag Register (Read Only)
-	 * |        |          |This bit indicates which PDMA channel is in active.
-	 * |        |          |0 = PDMA channel is not finished.
-	 * |        |          |1 = PDMA channel is active.
-	 * @var PDMA_T::TOUTPSC
-	 * Offset: 0x430  PDMA Time-out Prescaler Register
-	 * ---------------------------------------------------------------------------------------------------
-	 * |Bits    |Field     |Descriptions
-	 * | :----: | :----:   | :---- |
-	 * |[2:0]   |TOUTPSC0  |PDMA Channel 0 Time-out Clock Source Prescaler Bits
-	 * |        |          |000 = PDMA channel 0 time-out clock source is HCLK/28.
-	 * |        |          |001 = PDMA channel 0 time-out clock source is HCLK/29.
-	 * |        |          |010 = PDMA channel 0 time-out clock source is HCLK/210.
-	 * |        |          |011 = PDMA channel 0 time-out clock source is HCLK/211.
-	 * |        |          |100 = PDMA channel 0 time-out clock source is HCLK/212.
-	 * |        |          |101 = PDMA channel 0 time-out clock source is HCLK/213.
-	 * |        |          |110 = PDMA channel 0 time-out clock source is HCLK/214.
-	 * |        |          |111 = PDMA channel 0 time-out clock source is HCLK/215.
-	 * |[6:4]   |TOUTPSC1  |PDMA Channel 1 Time-out Clock Source Prescaler Bits
-	 * |        |          |000 = PDMA channel 1 time-out clock source is HCLK/28.
-	 * |        |          |001 = PDMA channel 1 time-out clock source is HCLK/29.
-	 * |        |          |010 = PDMA channel 1 time-out clock source is HCLK/210.
-	 * |        |          |011 = PDMA channel 1 time-out clock source is HCLK/211.
-	 * |        |          |100 = PDMA channel 1 time-out clock source is HCLK/212.
-	 * |        |          |101 = PDMA channel 1 time-out clock source is HCLK/213.
-	 * |        |          |110 = PDMA channel 1 time-out clock source is HCLK/214.
-	 * |        |          |111 = PDMA channel 1 time-out clock source is HCLK/215.
-	 * @var PDMA_T::TOUTEN
-	 * Offset: 0x434  PDMA Time-out Enable Register
-	 * ---------------------------------------------------------------------------------------------------
-	 * |Bits    |Field     |Descriptions
-	 * | :----: | :----:   | :---- |
-	 * |[1:0]   |TOUTENn   |PDMA Time-out Enable Bits
-	 * |        |          |0 = PDMA Channel n time-out function Disable.
-	 * |        |          |1 = PDMA Channel n time-out function Enable.
-	 * @var PDMA_T::TOUTIEN
-	 * Offset: 0x438  PDMA Time-out Interrupt Enable Register
-	 * ---------------------------------------------------------------------------------------------------
-	 * |Bits    |Field     |Descriptions
-	 * | :----: | :----:   | :---- |
-	 * |[1:0]   |TOUTIENn  |PDMA Time-out Interrupt Enable Bits
-	 * |        |          |0 = PDMA Channel n time-out interrupt Disable.
-	 * |        |          |1 = PDMA Channel n time-out interrupt Enable.
-	 * @var PDMA_T::SCATBA
-	 * Offset: 0x43C  PDMA Scatter-Gather Descriptor Table Base Address Register
-	 * ---------------------------------------------------------------------------------------------------
-	 * |Bits    |Field     |Descriptions
-	 * | :----: | :----:   | :---- |
-	 * |[31:16] |SCATBA    |PDMA Scatter-gather Descriptor Table Address Register
-	 * |        |          |In Scatter-Gather mode, this is the base address for calculating the next link - list address
-	 * |        |          |The next link address equation is
-	 * |        |          |Next Link Address = PDMA_SCATBA + PDMA_DSCT_NEXT.
-	 * |        |          |Note: Only useful in Scatter-Gather mode.
-	 * @var PDMA_T::TOC0_1
-	 * Offset: 0x440  PDMA Time-out Counter Ch1 and Ch0 Register
-	 * ---------------------------------------------------------------------------------------------------
-	 * |Bits    |Field     |Descriptions
-	 * | :----: | :----:   | :---- |
-	 * |[15:0]  |TOC0      |Time-out Counter for Channel 0
-	 * |        |          |This controls the period of time-out function for channel 0
-	 * |        |          |The calculation unit is based on 10 kHz clock.
-	 * |[31:16] |TOC1      |Time-out Counter for Channel 1
-	 * |        |          |This controls the period of time-out function for channel 1
-	 * |        |          |The calculation unit is based on 10 kHz clock.
-	 * @var PDMA_T::CHRST
-	 * Offset: 0x460  PDMA Channel Reset Register
-	 * ---------------------------------------------------------------------------------------------------
-	 * |Bits    |Field     |Descriptions
-	 * | :----: | :----:   | :---- |
-	 * |[15:0]  |CHnRST    |Channel N Reset
-	 * |        |          |0 = corresponding channel n not reset.
-	 * |        |          |1 = corresponding channel n is reset.
-	 * @var PDMA_T::REQSEL0_3
-	 * Offset: 0x480  PDMA Request Source Select Register 0
-	 * ---------------------------------------------------------------------------------------------------
-	 * |Bits    |Field     |Descriptions
-	 * | :----: | :----:   | :---- |
-	 * |[6:0]   |REQSRC0   |Channel 0 Request Source Selection
-	 * |        |          |This filed defines which peripheral is connected to PDMA channel 0
-	 * |        |          |User can configure the peripheral by setting REQSRC0.
-	 * |        |          |0 = Disable PDMA peripheral request.
-	 * |        |          |1 = Reserved.
-	 * |        |          |2 = Channel connects to USB_TX.
-	 * |        |          |3 = Channel connects to USB_RX.
-	 * |        |          |4 = Channel connects to UART0_TX.
-	 * |        |          |5 = Channel connects to UART0_RX.
-	 * |        |          |6 = Channel connects to UART1_TX.
-	 * |        |          |7 = Channel connects to UART1_RX.
-	 * |        |          |8 = Channel connects to UART2_TX.
-	 * |        |          |9 = Channel connects to UART2_RX.
-	 * |        |          |10=Channel connects to UART3_TX.
-	 * |        |          |11 = Channel connects to UART3_RX.
-	 * |        |          |12 = Channel connects to UART4_TX.
-	 * |        |          |13 = Channel connects to UART4_RX.
-	 * |        |          |14 = Channel connects to UART5_TX.
-	 * |        |          |15 = Channel connects to UART5_RX.
-	 * |        |          |16 = Channel connects to USCI0_TX.
-	 * |        |          |17 = Channel connects to USCI0_RX.
-	 * |        |          |18 = Channel connects to USCI1_TX.
-	 * |        |          |19 = Channel connects to USCI1_RX.
-	 * |        |          |20 = Channel connects to SPI0_TX.
-	 * |        |          |21 = Channel connects to SPI0_RX.
-	 * |        |          |22 = Channel connects to SPI1_TX.
-	 * |        |          |23 = Channel connects to SPI1_RX.
-	 * |        |          |24 = Channel connects to SPI2_TX.
-	 * |        |          |25 = Channel connects to SPI2_RX.
-	 * |        |          |26 = Channel connects to SPI3_TX.
-	 * |        |          |27 = Channel connects to SPI3_RX.
-	 * |        |          |28 = Channel connects to SPI4_TX.
-	 * |        |          |29 = Channel connects to SPI4_RX.
-	 * |        |          |30 = Reserved.
-	 * |        |          |31 = Reserved.
-	 * |        |          |32 = Channel connects to EPWM0_P1_RX.
-	 * |        |          |33 = Channel connects to EPWM0_P2_RX.
-	 * |        |          |34 = Channel connects to EPWM0_P3_RX.
-	 * |        |          |35 = Channel connects to EPWM1_P1_RX.
-	 * |        |          |36 = Channel connects to EPWM1_P2_RX.
-	 * |        |          |37 = Channel connects to EPWM1_P3_RX.
-	 * |        |          |38 = Channel connects to I2C0_TX.
-	 * |        |          |39 = Channel connects to I2C0_RX.
-	 * |        |          |40 = Channel connects to I2C1_TX.
-	 * |        |          |41 = Channel connects to I2C1_RX.
-	 * |        |          |42 = Channel connects to I2C2_TX.
-	 * |        |          |43 = Channel connects to I2C2_RX.
-	 * |        |          |44 = Channel connects to I2S0_TX.
-	 * |        |          |45 = Channel connects to I2S0_RX.
-	 * |        |          |46 = Channel connects to TMR0.
-	 * |        |          |47 = Channel connects to TMR1.
-	 * |        |          |48 = Channel connects to TMR2.
-	 * |        |          |49 = Channel connects to TMR3.
-	 * |        |          |50 = Channel connects to ADC_RX.
-	 * |        |          |51 = Channel connects to DAC0_TX.
-	 * |        |          |52 = Channel connects to DAC1_TX.
-	 * |        |          |53 = Channel connects to EPWM0_CH0_TX.
-	 * |        |          |54 = Channel connects to EPWM0_CH1_TX.
-	 * |        |          |55 = Channel connects to EPWM0_CH2_TX.
-	 * |        |          |56 = Channel connects to EPWM0_CH3_TX.
-	 * |        |          |57 = Channel connects to EPWM0_CH4_TX.
-	 * |        |          |58 = Channel connects to EPWM0_CH5_TX.
-	 * |        |          |59 = Channel connects to EPWM1_CH0_TX.
-	 * |        |          |60 = Channel connects to EPWM1_CH1_TX.
-	 * |        |          |61 = Channel connects to EPWM1_CH2_TX.
-	 * |        |          |62 = Channel connects to EPWM1_CH3_TX.
-	 * |        |          |63 = Channel connects to EPWM1_CH4_TX.
-	 * |        |          |64 = Channel connects to EPWM1_CH5_TX.
-	 * |        |          |65 = Channel connects to ETMC_RX.
-	 * |        |          |Others = Reserved.
-	 * |        |          |Note 1: A peripheral can't assign to two channels at the same time.
-	 * |        |          |Note 2: This field is useless when transfer between memory and memory.
-	 * |[14:8]  |REQSRC1   |Channel 1 Request Source Selection
-	 * |        |          |This filed defines which peripheral is connected to PDMA channel 1
-	 * |        |          |User can configure the peripheral setting by REQSRC1.
-	 * |        |          |Note: The channel configuration is the same as REQSRC0 field
-	 * |        |          |Please refer to the explanation of REQSRC0.
-	 * |[22:16] |REQSRC2   |Channel 2 Request Source Selection
-	 * |        |          |This filed defines which peripheral is connected to PDMA channel 2
-	 * |        |          |User can configure the peripheral setting by REQSRC2.
-	 * |        |          |Note: The channel configuration is the same as REQSRC0 field
-	 * |        |          |Please refer to the explanation of REQSRC0.
-	 * |[30:24] |REQSRC3   |Channel 3 Request Source Selection
-	 * |        |          |This filed defines which peripheral is connected to PDMA channel 3
-	 * |        |          |User can configure the peripheral setting by REQSRC3.
-	 * |        |          |Note: The channel configuration is the same as REQSRC0 field
-	 * |        |          |Please refer to the explanation of REQSRC0.
-	 * @var PDMA_T::REQSEL4_7
-	 * Offset: 0x484  PDMA Request Source Select Register 1
-	 * ---------------------------------------------------------------------------------------------------
-	 * |Bits    |Field     |Descriptions
-	 * | :----: | :----:   | :---- |
-	 * |[6:0]   |REQSRC4   |Channel 4 Request Source Selection
-	 * |        |          |This filed defines which peripheral is connected to PDMA channel 4
-	 * |        |          |User can configure the peripheral setting by REQSRC4.
-	 * |        |          |Note: The channel configuration is the same as REQSRC0 field
-	 * |        |          |Please refer to the explanation of REQSRC0.
-	 * |[14:8]  |REQSRC5   |Channel 5 Request Source Selection
-	 * |        |          |This filed defines which peripheral is connected to PDMA channel 5
-	 * |        |          |User can configure the peripheral setting by REQSRC5.
-	 * |        |          |Note: The channel configuration is the same as REQSRC0 field
-	 * |        |          |Please refer to the explanation of REQSRC0.
-	 * |[22:16] |REQSRC6   |Channel 6 Request Source Selection
-	 * |        |          |This filed defines which peripheral is connected to PDMA channel 6
-	 * |        |          |User can configure the peripheral setting by REQSRC6.
-	 * |        |          |Note: The channel configuration is the same as REQSRC0 field
-	 * |        |          |Please refer to the explanation of REQSRC0.
-	 * |[30:24] |REQSRC7   |Channel 7 Request Source Selection
-	 * |        |          |This filed defines which peripheral is connected to PDMA channel 7
-	 * |        |          |User can configure the peripheral setting by REQSRC7.
-	 * |        |          |Note: The channel configuration is the same as REQSRC0 field
-	 * |        |          |Please refer to the explanation of REQSRC0.
-	 * @var PDMA_T::REQSEL8_11
-	 * Offset: 0x488  PDMA Request Source Select Register 2
-	 * ---------------------------------------------------------------------------------------------------
-	 * |Bits    |Field     |Descriptions
-	 * | :----: | :----:   | :---- |
-	 * |[6:0]   |REQSRC8   |Channel 8 Request Source Selection
-	 * |        |          |This filed defines which peripheral is connected to PDMA channel 8
-	 * |        |          |User can configure the peripheral setting by REQSRC8.
-	 * |        |          |Note: The channel configuration is the same as REQSRC0 field
-	 * |        |          |Please refer to the explanation of REQSRC0.
-	 * |[14:8]  |REQSRC9   |Channel 9 Request Source Selection
-	 * |        |          |This filed defines which peripheral is connected to PDMA channel 9
-	 * |        |          |User can configure the peripheral setting by REQSRC9.
-	 * |        |          |Note: The channel configuration is the same as REQSRC0 field
-	 * |        |          |Please refer to the explanation of REQSRC0.
-	 * |[22:16] |REQSRC10  |Channel 10 Request Source Selection
-	 * |        |          |This filed defines which peripheral is connected to PDMA channel 10
-	 * |        |          |User can configure the peripheral setting by REQSRC10.
-	 * |        |          |Note: The channel configuration is the same as REQSRC0 field
-	 * |        |          |Please refer to the explanation of REQSRC0.
-	 * |[30:24] |REQSRC11  |Channel 11 Request Source Selection
-	 * |        |          |This filed defines which peripheral is connected to PDMA channel 11
-	 * |        |          |User can configure the peripheral setting by REQSRC11.
-	 * |        |          |Note: The channel configuration is the same as REQSRC0 field
-	 * |        |          |Please refer to the explanation of REQSRC0.
-	 * @var PDMA_T::REQSEL12_15
-	 * Offset: 0x48C  PDMA Request Source Select Register 3
-	 * ---------------------------------------------------------------------------------------------------
-	 * |Bits    |Field     |Descriptions
-	 * | :----: | :----:   | :---- |
-	 * |[6:0]   |REQSRC12  |Channel 12 Request Source Selection
-	 * |        |          |This filed defines which peripheral is connected to PDMA channel 12
-	 * |        |          |User can configure the peripheral setting by REQSRC12.
-	 * |        |          |Note: The channel configuration is the same as REQSRC0 field
-	 * |        |          |Please refer to the explanation of REQSRC0.
-	 * |[14:8]  |REQSRC13  |Channel 13 Request Source Selection
-	 * |        |          |This filed defines which peripheral is connected to PDMA channel 13
-	 * |        |          |User can configure the peripheral setting by REQSRC13.
-	 * |        |          |Note: The channel configuration is the same as REQSRC0 field
-	 * |        |          |Please refer to the explanation of REQSRC0.
-	 * |[22:16] |REQSRC14  |Channel 14 Request Source Selection
-	 * |        |          |This filed defines which peripheral is connected to PDMA channel 14
-	 * |        |          |User can configure the peripheral setting by REQSRC14.
-	 * |        |          |Note: The channel configuration is the same as REQSRC0 field
-	 * |        |          |Please refer to the explanation of REQSRC0.
-	 * |[30:24] |REQSRC15  |Channel 15 Request Source Selection
-	 * |        |          |This filed defines which peripheral is connected to PDMA channel 15
-	 * |        |          |User can configure the peripheral setting by REQSRC15.
-	 * |        |          |Note: The channel configuration is the same as REQSRC0 field
-	 * |        |          |Please refer to the explanation of REQSRC0.
-	 */
 	DSCT_T DSCT[16];
 	__I  uint32_t CURSCAT[16];              /*!< [0x0100] Current Scatter-Gather Descriptor Table Address of PDMA Channel n */
 	/// @cond HIDDEN_SYMBOLS
@@ -860,103 +371,34 @@ typedef struct {
 /*---------------------------------------------------------------------------------------------------------*/
 /*  Peripheral Transfer Mode Constant Definitions                                                          */
 /*---------------------------------------------------------------------------------------------------------*/
-#define PDMA_MEM          0UL   /*!<DMA Connect to Memory \hideinitializer */
-#define PDMA_USB_TX       2UL   /*!<DMA Connect to USB_TX \hideinitializer */
-#define PDMA_USB_RX       3UL /*!<DMA Connect to USB_RX \hideinitializer */
-#define PDMA_UART0_TX     4UL /*!<DMA Connect to UART0_TX \hideinitializer */
-#define PDMA_UART0_RX     5UL /*!<DMA Connect to UART0_RX \hideinitializer */
-#define PDMA_UART1_TX     6UL /*!<DMA Connect to UART1_TX \hideinitializer */
-#define PDMA_UART1_RX     7UL /*!<DMA Connect to UART1_RX \hideinitializer */
-#define PDMA_UART2_TX     8UL /*!<DMA Connect to UART2_TX \hideinitializer */
-#define PDMA_UART2_RX     9UL /*!<DMA Connect to UART2_RX \hideinitializer */
-#define PDMA_UART3_TX    10UL /*!<DMA Connect to UART3_TX \hideinitializer */
-#define PDMA_UART3_RX    11UL /*!<DMA Connect to UART3_RX \hideinitializer */
-#define PDMA_UART4_TX    12UL /*!<DMA Connect to UART4_TX \hideinitializer */
-#define PDMA_UART4_RX    13UL /*!<DMA Connect to UART4_RX \hideinitializer */
-#define PDMA_UART5_TX    14UL /*!<DMA Connect to UART5_TX \hideinitializer */
-#define PDMA_UART5_RX    15UL /*!<DMA Connect to UART5_RX \hideinitializer */
-#define PDMA_UART6_TX    16UL /*!<DMA Connect to USCI0_TX \hideinitializer */
-#define PDMA_UART6_RX    17UL /*!<DMA Connect to USCI0_RX \hideinitializer */
-#define PDMA_UART7_TX    18UL /*!<DMA Connect to USCI1_TX \hideinitializer */
-#define PDMA_UART7_RX    19UL /*!<DMA Connect to USCI1_RX \hideinitializer */
-#define PDMA_SPI0_TX     20UL /*!<DMA Connect to SPI0_TX \hideinitializer */
-#define PDMA_SPI0_RX     21UL /*!<DMA Connect to SPI0_RX \hideinitializer */
-#define PDMA_SPI1_TX     22UL /*!<DMA Connect to SPI1_TX \hideinitializer */
-#define PDMA_SPI1_RX     23UL /*!<DMA Connect to SPI1_RX \hideinitializer */
-#define PDMA_SPI2_TX     24UL /*!<DMA Connect to SPI2_TX \hideinitializer */
-#define PDMA_SPI2_RX     25UL /*!<DMA Connect to SPI2_RX \hideinitializer */
-#define PDMA_UART8_TX     26UL /*!<DMA Connect to SPI3_TX \hideinitializer */
-#define PDMA_UART8_RX     27UL /*!<DMA Connect to SPI3_RX \hideinitializer */
-#define PDMA_UART9_TX     28UL /*!<DMA Connect to SPI4_TX \hideinitializer */
-#define PDMA_UART9_RX     29UL /*!<DMA Connect to SPI4_RX \hideinitializer */
-#define PDMA_EPWM0_P1_RX  32UL /*!<DMA Connect to EPWM0_P1 \hideinitializer */
-#define PDMA_EPWM0_P2_RX  33UL /*!<DMA Connect to EPWM0_P2 \hideinitializer */
-#define PDMA_EPWM0_P3_RX  34UL /*!<DMA Connect to EPWM0_P3 \hideinitializer */
-#define PDMA_EPWM1_P1_RX  35UL /*!<DMA Connect to EPWM1_P1 \hideinitializer */
-#define PDMA_EPWM1_P2_RX  36UL /*!<DMA Connect to EPWM1_P2 \hideinitializer */
-#define PDMA_EPWM1_P3_RX  37UL /*!<DMA Connect to PWM1_P3 \hideinitializer */
-#define PDMA_I2C0_TX     38UL /*!<DMA Connect to I2C0_TX \hideinitializer */
-#define PDMA_I2C0_RX     39UL /*!<DMA Connect to I2C0_RX \hideinitializer */
-#define PDMA_I2C1_TX     40UL /*!<DMA Connect to I2C1_TX \hideinitializer */
-#define PDMA_I2C1_RX     41UL /*!<DMA Connect to I2C1_RX \hideinitializer */
-#define PDMA_I2C2_TX     42UL /*!<DMA Connect to I2C2_TX \hideinitializer */
-#define PDMA_I2C2_RX     43UL /*!<DMA Connect to I2C2_RX \hideinitializer */
-#define PDMA_I2C3_TX     44UL
-#define PDMA_I2C3_RX     45UL
-//#define PDMA_I2S0_TX     44UL /*!<DMA Connect to I2S0_TX \hideinitializer */
-//#define PDMA_I2S0_RX     45UL /*!<DMA Connect to I2S0_RX \hideinitializer */
-#define PDMA_TMR0        46UL /*!<DMA Connect to TMR0 \hideinitializer */
-#define PDMA_TMR1        47UL /*!<DMA Connect to TMR1 \hideinitializer */
-#define PDMA_TMR2        48UL /*!<DMA Connect to TMR2 \hideinitializer */
-#define PDMA_TMR3        49UL /*!<DMA Connect to TMR3 \hideinitializer */
-#define PDMA_ADC_RX      50UL /*!<DMA Connect to ADC_RX \hideinitializer */
-#define PDMA_DAC0_TX     51UL /*!<DMA Connect to DAC0_TX \hideinitializer */
-#define PDMA_DAC1_TX     52UL /*!<DMA Connect to DAC1_TX \hideinitializer */
-#define EPWM0_CH0_TX      53UL /*!<DMA Connect to EPWM0_CH0_TX \hideinitializer */
-#define EPWM0_CH1_TX      54UL /*!<DMA Connect to EPWM0_CH1_TX \hideinitializer */
-#define EPWM0_CH2_TX      55UL /*!<DMA Connect to EPWM0_CH2_TX \hideinitializer */
-#define EPWM0_CH3_TX      56UL /*!<DMA Connect to EPWM0_CH3_TX \hideinitializer */
-#define EPWM0_CH4_TX      57UL /*!<DMA Connect to EPWM0_CH4_TX \hideinitializer */
-#define EPWM0_CH5_TX      58UL /*!<DMA Connect to EPWM0_CH5_TX \hideinitializer */
-#define EPWM1_CH0_TX      59UL /*!<DMA Connect to EPWM1_CH0_TX \hideinitializer */
-#define EPWM1_CH1_TX      60UL /*!<DMA Connect to EPWM1_CH1_TX \hideinitializer */
-#define EPWM1_CH2_TX      61UL /*!<DMA Connect to EPWM1_CH2_TX \hideinitializer */
-#define EPWM1_CH3_TX      62UL /*!<DMA Connect to EPWM1_CH3_TX \hideinitializer */
-#define EPWM1_CH4_TX      63UL /*!<DMA Connect to EPWM1_CH4_TX \hideinitializer */
-#define EPWM1_CH5_TX      64UL /*!<DMA Connect to EPWM1_CH5_TX \hideinitializer */
-
-
-// For PDMA Data Flow Test
-enum {
-	PDMA_M2M_TEST = 0,
-	PDMA_UART1_TEST,
-	PDMA_UART2_TEST,
-	PDMA_UART3_TEST,
-	PDMA_UART4_TEST,
-	PDMA_UART5_TEST,
-	PDMA_UART6_TEST,
-	PDMA_UART7_TEST,
-	PDMA_UART8_TEST,
-	PDMA_UART9_TEST,
-	PDMA_QSPI0_TEST,
-	PDMA_SPI0_TEST,
-	PDMA_SPI1_TEST,
-	PDMA_I2C0_I2C1_TEST,
-	PDMA_I2C2_I2C3_TEST,
-	PDMA_TEST_CNT
-};
-
-extern int  pdma_pass_cnt[PDMA_TEST_CNT];
-extern int  pdma_err_cnt[PDMA_TEST_CNT];
-
-#define PDMA_UART_TEST_LEN         (1024)
-#define PDMA_UART_SLEEP_TIME       (100)
-
-#define PDAM_SPI_DIVIDER           (4)           // SPI clock is 12M/(PDAM_SPI_DIVIDER+1)
-#define PDMA_SPI_TEST_LEN          (1024)
-#define PDMA_SLEEP_TIME            (50)
+#define PDMA_MEM          0UL
+#define PDMA_UART0_TX     4UL
+#define PDMA_UART0_RX     5UL
+#define PDMA_UART1_TX     6UL
+#define PDMA_UART1_RX     7UL
+#define PDMA_UART2_TX     8UL
+#define PDMA_UART2_RX     9UL
+#define PDMA_UART3_TX    10UL
+#define PDMA_UART3_RX    11UL
+#define PDMA_UART4_TX    12UL
+#define PDMA_UART4_RX    13UL
+#define PDMA_UART5_TX    14UL
+#define PDMA_UART5_RX    15UL
+#define PDMA_UART6_TX    16UL
+#define PDMA_UART6_RX    17UL
+#define PDMA_UART7_TX    18UL
+#define PDMA_UART7_RX    19UL
+#define PDMA_SPI0_TX     20UL
+#define PDMA_SPI0_RX     21UL
+#define PDMA_SPI1_TX     22UL
+#define PDMA_SPI1_RX     23UL
+#define PDMA_SPI2_TX     24UL
+#define PDMA_SPI2_RX     25UL
+#define PDMA_UART8_TX     26UL
+#define PDMA_UART8_RX     27UL
+#define PDMA_UART9_TX     28UL
+#define PDMA_UART9_RX     29UL
 
-#define PDMA_I2C_TEST_LEN          (384)
 
 
 /**@}*/ /* PDMA_CONST */
